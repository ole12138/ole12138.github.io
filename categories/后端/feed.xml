<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后端 on Jingmin's blog</title><link>https://ole12138.gitee.io/categories/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 后端 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Fri, 26 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ole12138.gitee.io/categories/%E5%90%8E%E7%AB%AF/feed.xml" rel="self" type="application/rss+xml"/><item><title>简单登录验证的实现</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E7%99%BB%E5%BD%95%E4%B8%8E%E5%AE%89%E5%85%A8/%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E7%99%BB%E5%BD%95%E4%B8%8E%E5%AE%89%E5%85%A8/%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid><description>简单登录验证的实现 登录验证，对应英文Authentication。
这里的简单登录验证，指的是使用HTTP协议的情况下，传统浏览器-服务器通信时，广泛使用的cookie-session登录验证机制。
登录验证的要求 除首页、login页面、js脚本文件、css样式文件外的资源，都需要用户登录后，才能访问。
思路 利用cookie-session作登录验证。cookie-session实现了在无状态的HTTP协议下实现状态的保存。
HTTP协议是无状态的。为了识别同一个浏览器发出的请求，发展出了cookie-session机制。
打开浏览器，浏览器第一次向服务器发出HTTP请求，服务器端就会生成一个session对象（可以用来保存该浏览器/用户的状态）。在生成HTTP响应时，服务器会一并将这个session的id写到HTTP响应头的Set-Cookie域中，传给浏览器。
浏览器收到响应后，会记录这个session-id，之后向同一个服务器/网站发起请求时，都会在HTTP请求头的Cookie域中带上这个session-id。服务器收到这样的请求，就会知道，这是来自同一个浏览器的请求。因此可以根据该浏览器的
浏览器关闭时，保存的所有网站的cookie都被清除，而服务器上生成的session对象在一定时间后也会被清除。
用户校验完账号密码，完成登录时，向其session中添加用户登录信息，比如向其session中添加用户名。
检查每个请求对应的session中是否包含了登录状态信息，如果未包含登录信息，跳转到登录页面。当然，这里要排除掉访问login页面、公共页面、静态公共资源的请求。
这里是java后端环境，使用servlet web容器，可以使用servlet Filter。 如果还使用了Spring开发项目，Spring的Interceptor可以做到更细粒度的拦截行为。Spring的interceptor有Spring aop的MethodInterceptor和SpringMVC的HandlerInterceptor。
实现 使用SpringMVC的HandlerInterceptor来拦截请求，作登录验证。
实现拦截器 package com.jingmin.logindemo.interceptor; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; @Component public class SecurityInterceptor implements HandlerInterceptor { public static final String SESSION_KEY = &amp;#34;user&amp;#34;; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { HttpSession session = request.getSession(); if (session.getAttribute(SESSION_KEY) != null) { return true; } // 跳转登录 String url = &amp;#34;/login.</description></item></channel></rss>