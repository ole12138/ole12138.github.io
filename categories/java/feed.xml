<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Jingmin's blog</title><link>https://ole12138.gitee.io/categories/java/</link><description>Recent content in Java on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Thu, 07 Jan 2021 10:40:48 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/categories/java/feed.xml" rel="self" type="application/rss+xml"/><item><title>转载：Java8函数式编程入门</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 07 Jan 2021 10:40:48 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</guid><description>文章非原创，转载来源：https://www.cnblogs.com/snowinpluto/p/5981400.html
1. 概述 1.1 函数式编程简介 我们最常用的面向对象编程（Java）属于命令式编程（Imperative Programming）这种编程范式。常见的编程范式还有逻辑式编程（Logic Programming），函数式编程（Functional Programming）。
函数式编程作为一种编程范式，在科学领域，是一种编写计算机程序数据结构和元素的方式，它把计算过程当做是数学函数的求值，而避免更改状态和可变数据。
函数式编程并非近几年的新技术或新思维，距离它诞生已有大概50多年的时间了。它一直不是主流的编程思维，但在众多的所谓顶级编程高手的科学工作者间，函数式编程是十分盛行的。
什么是函数式编程？简单的回答：一切都是数学函数。函数式编程语言里也可以有对象，但通常这些对象都是恒定不变的 —— 要么是函数参数，要什么是函数返回值。函数式编程语言里没有 for/next 循环，因为这些逻辑意味着有状态的改变。相替代的是，这种循环逻辑在函数式编程语言里是通过递归、把函数当成参数传递的方式实现的。
举个例子：
a = a + 1 这段代码在普通成员看来并没有什么问题，但在数学家看来确实不成立的，因为它意味着变量值得改变。
1.2 Lambda 表达式简介 Java 8的最大变化是引入了Lambda（Lambda 是希腊字母 λ 的英文名称）表达式——一种紧凑的、传递行为的方式。
先看个例子：
button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { System.out.println(&amp;#34;button clicked&amp;#34;); } }); 这段代码使用了匿名类。ActionListener 是一个接口，这里 new 了一个类实现了 ActionListener 接口，然后重写了 actionPerformed 方法。actionPerformed 方法接收 ActionEvent 类型参数，返回空。
这段代码我们其实只关心中间打印的语句，其他都是多余的。所以使用 Lambda 表达式，我们就可以简写为：
button.addActionListener(event -&amp;gt; System.out.println(&amp;#34;button clicked&amp;#34;)); 2. Lambda 表达式 2.1 Lambda 表达式的形式 Java 中 Lambda 表达式一共有五种基本形式，具体如下：</description></item><item><title>转载：Java Annotation认知</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/java%E6%B3%A8%E8%A7%A3annotation/</link><pubDate>Tue, 05 Jan 2021 12:00:39 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/java%E6%B3%A8%E8%A7%A3annotation/</guid><description>转载，原网址：https://www.cnblogs.com/skywang12345/p/3344137.html
Annotation Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。
Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。
内置的注解 Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。
作用在代码的注解是
@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。 @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。 @SuppressWarnings - 指示编译器去忽略注解中声明的警告。 作用在其他注解的注解(或者说 元注解)是:
@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 @Documented - 标记这些注解是否包含在用户文档中。 @Target - 标记这个注解应该是哪种 Java 成员。 @Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类) 从 Java 7 开始，额外添加了 3 个注解:
@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。 @Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。 Annotation 架构 从中，我们可以看出：</description></item></channel></rss>