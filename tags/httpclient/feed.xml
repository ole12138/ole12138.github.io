<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HttpClient on Jingmin's blog</title><link>https://ole12138.gitee.io/tags/httpclient/</link><description>Recent content in HttpClient on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Wed, 13 Jan 2021 15:54:12 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/tags/httpclient/feed.xml" rel="self" type="application/rss+xml"/><item><title>发起HTTP请求：使用OkHttpClient</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8okhttpclient/</link><pubDate>Wed, 13 Jan 2021 15:54:12 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8okhttpclient/</guid><description>发起HTTP请求：使用OkHttpClient 现在java比较好用的http客户端是开源的OkHttp。支持HTTP/2, 简单易用且灵活。
官网：https://square.github.io/okhttp/
简单使用测试（http、https类型的get，post）：
class OkHttpClientUtilTest { @Test public void doGet() throws IOException { String url = &amp;#34;http://httpbin.org/anything&amp;#34;; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(url) .build(); try (Response response = client.newCall(request).execute()) { String res = response.body().string(); System.out.println(res); } request = new Request.Builder() .get() .url(url + &amp;#34;?key1=value1&amp;amp;key2=value2&amp;#34;).header(&amp;#34;Cookie&amp;#34;, &amp;#34;cook1=sd;cook2=sdd;&amp;#34;).build(); try (Response response = client.newCall(request).execute()) { String res = response.body().string(); System.out.println(res); } url = &amp;#34;https://httpbin.org/anything&amp;#34;; request = new Request.</description></item><item><title>发起HTTP请求：使用JDK11的HttpClient</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8jdk11%E7%9A%84httpclient/</link><pubDate>Mon, 11 Jan 2021 17:08:09 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8jdk11%E7%9A%84httpclient/</guid><description>发起HTTP请求：使用JDK11的HttpClient JDK11 API中原生的增加了HTTP客户端类HttpClient，用于发起HTTP请求，支持HTTP/2.
以下内容非原创，参考/转载来源：https://www.dariawan.com/tutorials/java/java-11-standard-http-client-vs-apache-httpclient/
JDK11的HttpClient使用测试：
package com.wangjm.http.connection; import com.google.common.net.UrlEscapers; import org.junit.jupiter.api.Test; import java.net.ProxySelector; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.time.Duration; /** * @author : wangjm * @date : 2021/1/11 20:47 * JDK11 API 提供了HttpClient，支持HTTP/2 * 简单使用的情况下，http和https链接的请求都是相同的 */ class JDKHttpClientUtilTest { @Test public void doTest() throws Exception { final HttpClient HTTP_CLIENT = HttpClient.newBuilder() .version(HttpClient.Version.HTTP_2) // default .followRedirects(HttpClient.Redirect.NORMAL) // Always redirect, except from HTTPS URLs to HTTP URLs. .</description></item><item><title>发起HTTP请求：使用Apache的HttpClient</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8apache%E7%9A%84httpclient/</link><pubDate>Mon, 11 Jan 2021 14:34:53 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/http%E8%AF%B7%E6%B1%82/%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8apache%E7%9A%84httpclient/</guid><description>Java发起HTTP请求：使用Apache的HttpClient 许多小伙伴都喜欢用apache的HttpComponts里的HttpClient来向远程发起HTTP请求
从HttpComponents官网的features说明来看，当前版本(HttpClient4.5)仅支持到HTTP/1.1。 但是HttpCore.5.1BETA将支持HTTP/2，可惜还在BETA阶段。
使用方式：
项目中引入对应的maven依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.5.13&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 参考了别人的代码,简单使用：
/** * 使用apache的HttpClient发起HTTP以及HTTPS请求 * 注意：当前的apache的HttpClient4.5只支持到HTTP/1.1 * 参考：https://zhuanlan.zhihu.com/p/69285935 * 参考：https://blog.csdn.net/happylee6688/article/details/47148227 */ public class HttpClientUtil { private static PoolingHttpClientConnectionManager connMgr; private static RequestConfig requestConfig; private static final int MAX_TIMEOUT = 7000; static { // 设置连接池 connMgr = new PoolingHttpClientConnectionManager(); // 设置连接池大小 connMgr.setMaxTotal(100); connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal()); RequestConfig.Builder configBuilder = RequestConfig.custom(); // 设置连接超时 configBuilder.setConnectTimeout(MAX_TIMEOUT); // 设置读取超时 configBuilder.setSocketTimeout(MAX_TIMEOUT); // 设置从连接池获取连接实例的超时 configBuilder.</description></item></channel></rss>