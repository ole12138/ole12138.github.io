<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jar包 on Jingmin's blog</title><link>https://ole12138.gitee.io/tags/jar%E5%8C%85/</link><description>Recent content in jar包 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Fri, 22 Jan 2021 13:47:18 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/tags/jar%E5%8C%85/feed.xml" rel="self" type="application/rss+xml"/><item><title>Maven打包</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E6%89%93%E5%8C%85/</link><pubDate>Fri, 22 Jan 2021 13:47:18 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E6%89%93%E5%8C%85/</guid><description>Maven打jar包 实际开发的项目一般都要打成jar包或者war包。
如果是独立的java程序，打成jar包后，在安装了java运行时的环境中，命令行即可直接运行：
java -jar xxx.jar 如果是传统的java web项目，打成war包后，放入tomcat或其他java web容器中，即可直接运行。
如果使用springboot开发java web项目，由于springboot默认集成javaweb容器，也可以打成jar包，在命令行直接运行。
独立java程序打jar包 首先，项目的pom文件要添加一行，设置打包格式为jar格式：
&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 然后要在项目的pom.xml文件中添加maven-resources-plugin,用于将项目的配置文件复制到将要生成的jar包外，方便修改配置。（这里将项目的配置文件复制到了输出文件夹的/resources目录下）。
&amp;lt;!-- Maven插件的汇总介绍： https://maven.apache.org/plugins/index.html --&amp;gt; &amp;lt;!-- 资源/配置文件的复制插件 --&amp;gt; &amp;lt;!-- https://maven.apache.org/plugins/maven-resources-plugin/ --&amp;gt; &amp;lt;!-- 默认：src/main/resources下的资源和pom.xml下project.build.resources标签下的资源都会被自动复制到源码编译后的输出目录--&amp;gt; &amp;lt;!-- 默认：测试源码目录的资源会被自动输出到测试输出目录--&amp;gt; &amp;lt;!-- 如果想要把配置/资源输出到指定目录，需要作自定义配置--&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt; &amp;lt;!-- 自定义配置：该过程的作用是用于复制指定的资源文件到指定位置--&amp;gt; &amp;lt;!--可用于将配置文件放到jar包外面，方便修改 --&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-resources&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;*.properties&amp;lt;/include&amp;gt; &amp;lt;include&amp;gt;log4j2.xml&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}/resources/&amp;lt;/outputDirectory&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; 然后要在项目的pom.xml文件中添加maven-dependency-plugin,用于将项目的依赖复制到将要生成的jar包外。（这里将项目的依赖复制到了输出文件夹的/lib目录下）。
&amp;lt;!--依赖复制与分析插件--&amp;gt; &amp;lt;!--https://maven.apache.org/plugins/maven-dependency-plugin/--&amp;gt; &amp;lt;!-- 这里该插件的作用是用于复制依赖的jar包到指定的文件夹里 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.2&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.</description></item></channel></rss>