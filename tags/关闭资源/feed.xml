<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>关闭资源 on Jingmin's blog</title><link>https://ole12138.gitee.io/tags/%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90/</link><description>Recent content in 关闭资源 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Mon, 11 Jan 2021 18:11:08 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/tags/%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90/feed.xml" rel="self" type="application/rss+xml"/><item><title>随笔-JDK版本的切换</title><link>https://ole12138.gitee.io/post/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-jdk%E7%89%88%E6%9C%AC%E7%9A%84%E5%88%87%E6%8D%A2/</link><pubDate>Mon, 11 Jan 2021 18:11:08 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-jdk%E7%89%88%E6%9C%AC%E7%9A%84%E5%88%87%E6%8D%A2/</guid><description>JDK版本的切换 有时为了使用新一点的API，项目需要使用高版本的JDK，比如JDK8切换到JDK11.
有时为了维护旧项目，需要使用旧版本的JDK，比如JDK8切换到JDK7.
这就需要安装和切换对应的JDK
安装对应版本的JDK 一般我们使用Java SE版本。Linux自带的是openJDK，windows下我们一般使用Oracle 的JDK。
下载安装过程略。
IDEA中切换SDK 我们的项目一般都是在IDE工具中开发的。Java典型的IDE是intellij IDEA。
在IDEA中打开对应的项目。作如下操作：
File-&amp;gt;Project Structure-&amp;gt;SDKs-&amp;gt;点&amp;quot;+&amp;ldquo;号新建一个JDK，JDK所在目录选定前面JDK的安装目录。
这样，项目就会使用对应的JDK。
若已经按之前的JDK版本打开/导入了项目，为了使新的JDK生效，还需要做如下操作：
File-&amp;gt;Project Structure-&amp;gt;Modules-&amp;gt;点击右侧Dependencis选项卡-&amp;gt;Module SDK选择刚刚新建的那个JDK
Maven中切换compiler版本 我们一般是使用Maven构建程序的。
打开Maven要用到的pom文件，编译插件部分作如下修改：
&amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;11&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;11&amp;lt;/target&amp;gt; &amp;lt;!--&amp;lt;release&amp;gt;11&amp;lt;/release&amp;gt;--&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; 最终，运行maven编译通过。</description></item><item><title>Java中资源的关闭</title><link>https://ole12138.gitee.io/post/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-java%E4%B8%AD%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B3%E9%97%AD/</link><pubDate>Sun, 10 Jan 2021 22:52:50 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-java%E4%B8%AD%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B3%E9%97%AD/</guid><description>Java中资源的关闭 在Java编程过程中，如果打开了外部资源（文件、数据库连接、网络连接等），必须在这些外部资源使用完毕后，手动关闭它们。因为外部资源不由JVM管理，无法享用JVM的垃圾回收机制，如果不在编程时确保在正确的时机关闭外部资源，就会导致外部资源泄露，紧接着就会出现文件被异常占用，数据库连接过多导致连接池溢出等诸多很严重的问题。
一般
传统的资源关闭方式 为了确保外部资源一定要被关闭，通常关闭代码被写入finally代码块中，当然还必须注意到关闭资源时可能抛出的异常。（最后抛出的异常是关闭资源过程中又新抛出的异常）
JDK7及其之后的资源关闭方式 确实，在JDK7以前，Java没有自动关闭外部资源的语法特性，直到JDK7中新增了try-with-resource语法，才实现了这一功能。 注意1：只有一个外部资源的句柄对象实现了AutoCloseable接口，JDK7中便可以利用try-with-resource语法更优雅的关闭资源，消除板式代码。 注意2：try-with-resource时，如果对外部资源的处理和对外部资源的关闭均遭遇了异常，“关闭异常”将被抑制，“处理异常”将被抛出，但“关闭异常”并没有丢失，而是存放在“处理异常”的被抑制的异常列表中。（最后抛出的异常是之前最先抛出的异常）
lombok 方式 使用 lombok 提供的注解 @Cleanup。
进一步阅读 Java 之优雅地关闭资源 try-with-resource、lombok
Lombok之@Cleanup使用
使用Try-with-resources自动关闭资源
Jdk6 7 9 流关闭的新姿势</description></item></channel></rss>