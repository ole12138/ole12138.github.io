<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JDK代理 on Jingmin's blog</title><link>https://ole12138.gitee.io/tags/jdk%E4%BB%A3%E7%90%86/</link><description>Recent content in JDK代理 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Sat, 09 Jan 2021 17:19:57 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/tags/jdk%E4%BB%A3%E7%90%86/feed.xml" rel="self" type="application/rss+xml"/><item><title>Java设计模式之代理模式</title><link>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 09 Jan 2021 17:19:57 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid><description>Java设计模式之代理模式 代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:
符合开闭原则，方便增加功能：可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能. 这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法。 中介隔离作用：某些情况下，客户不想或不应当直接访问目标对象。 代理模式下，用户对对象的访问流程如下：
静态代理 静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.
定义接口（目标类的接口）
public interface Subject { public void doSomething(); } 实现类（目标类，或者之后会被代理的类）
public class SubjectImpl1 implements Subject { @Override public void doSomething() { System.out.println(&amp;#34;do something with implimentation 1.&amp;#34;); } } 静态代理类
public class StaticProxy implements Subject { Subject target; public StaticProxy(Subject target) { this.target = target; } @Override public void doSomething() { System.out.println(&amp;#34;before doSomething&amp;#34;); target.doSomething(); System.out.println(&amp;#34;after doSomething&amp;#34;); } } 测试
class PoxyTest { //静态代理的测试 @Test public void doStaticProxyTest() { Subject subject = new StaticProxy(new SubjectImpl1()); subject.</description></item></channel></rss>