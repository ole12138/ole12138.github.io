<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>依赖管理 on Jingmin's blog</title><link>https://ole12138.github.io/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</link><description>Recent content in 依赖管理 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Wed, 06 Jan 2021 10:00:39 +0800</lastBuildDate><atom:link href="https://ole12138.github.io/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/feed.xml" rel="self" type="application/rss+xml"/><item><title>Maven pom.xml中的元素modules、parent、properties以及import（转载）</title><link>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%BD%AC%E8%BD%BDmaven%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 06 Jan 2021 10:00:39 +0800</pubDate><guid>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%BD%AC%E8%BD%BDmaven%E4%BD%BF%E7%94%A8/</guid><description>Maven pom.xml中的元素modules、parent、properties以及import 非原创，转载来源：https://www.cnblogs.com/youzhibing/p/5427130.html
另，Maven文档链接：https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
maven的核心是pom.xml。印象最深的就是如下四个元素：modules、parent、properties、import。
modules 从字面意思来说，module就是模块，而pom.xml中的modules也正是这个意思，用来管理同个项目中的各个模块；如果maven用的比较简单，或者说项目的模块在pom.xml没进行划分，那么此元素是用不到的；不过一般大一点的项目是要用到的。
需求场景 如果我们的项目分成了好几个模块，那么我们构建的时候是不是有几个模块就需要构建几次了（到每个模块的目录下执行mvn命令）？当然，你逐个构建没问题，但是非要这么麻烦的一个一个的构建吗，那么简单的做法就是使用聚合，一次构建全部模块。
具体实现 a.既然使用聚合，那么就需要一个聚合的载体，先创建一个普通的maven项目account-aggregator,如下图：
因为是个聚合体，仅仅负责聚合其他模块，那么就只需要上述目录，该删除的就删了；注意的是pom文件的书写：
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.youzhibing.account&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;account-aggregator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;Account Aggrregator&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;modules&amp;gt;　&amp;lt;!-- 模块都写在此处 --&amp;gt; &amp;lt;module&amp;gt;account-register&amp;lt;/module&amp;gt; &amp;lt;module&amp;gt;account-persist&amp;lt;/module&amp;gt; &amp;lt;/modules&amp;gt; &amp;lt;/project&amp;gt; b.创建子模account-register、account-persist:右击account-aggregator，new &amp;ndash;&amp;gt; other &amp;ndash;&amp;gt; Maven，选择Maven Module，创建maven模块。
c.创建完成后，项目结构如下，那么此时account-aggregator可以收缩起来了，我们操作具体子模块就好了。
d.注意点，当我们打开包结构的子模块的pom文件时，发现离预期的多了一些内容，我们坐下处理就好了
e.那么编码完了之后，我们只需要构建account-aggregator就好了，所有的子模块都会构建。
parent 继承，和java中的继承相当，作用就是复用
需求场景 若每个子模块都都用的了spring，那么我们是不是每个子模块都需要单独配置spring依赖了?,这么做是可以的，但是我们有更优的做法，那就是继承，用parent来实现。
具体实现 a.配置父pom.xml
我就用聚合pom来做父pom,配置子模块的公共依赖。
父(account-aggregator)pom.xml :
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.youzhibing.account&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;account-aggregator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;Account Aggrregator&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;modules&amp;gt; &amp;lt;!-- 模块都写在此处 --&amp;gt; &amp;lt;module&amp;gt;account-register&amp;lt;/module&amp;gt; &amp;lt;module&amp;gt;account-persist&amp;lt;/module&amp;gt; &amp;lt;/modules&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!</description></item></channel></rss>