<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>树 on Jingmin's blog</title><link>https://ole12138.gitee.io/tags/%E6%A0%91/</link><description>Recent content in 树 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Thu, 25 Jun 2020 05:24:48 +0800</lastBuildDate><atom:link href="https://ole12138.gitee.io/tags/%E6%A0%91/feed.xml" rel="self" type="application/rss+xml"/><item><title>PAT甲级习题</title><link>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/pat%E4%B9%A0%E9%A2%98/</link><pubDate>Thu, 25 Jun 2020 05:24:48 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/pat%E4%B9%A0%E9%A2%98/</guid><description>PAT甲级习题 栈的模拟 例1 已知入栈顺序1-N，并给定栈最大容积M。判断出栈顺序是否正确, 以及是否爆栈
题目链接
方法：栈的模拟
由于入栈是固定从1到N的，那么某元素出栈前，比它小的数都应当已经入栈。利用这个过程来确定出入栈顺序。
packagecom.jingmin.advanced2; importjava.io.BufferedReader; importjava.io.IOException; importjava.io.InputStreamReader; importjava.util.Stack; /** * @author : wangjm * @date : 2020/6/26 09:55 * @discription : https://www.nowcoder.com/pat/5/problem/4090 * 已知入栈顺序，判断出栈顺序是否正确, 以及是否爆栈: 栈的模拟 * 由于入栈是固定从1到N的，那么某元素出栈前，比它小的数都应当已经入栈 */ public class Advanced1040 { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String[] s = br.readLine().split(&amp;quot; &amp;quot;); int m = Integer.</description></item><item><title>数据结构总结</title><link>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 25 Jun 2020 05:24:48 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</guid><description>树 二叉树 二叉树搜索树 平衡二叉搜索树（AVL树） 参考：https://zhuanlan.zhihu.com/p/34899732 参考：https://oi-wiki.org/ds/avl/ 参考：https://www.jianshu.com/p/65c90aa1236d 参考：https://blog.csdn.net/wanderlustLee/article/details/81297253
AVL树是，在二叉搜索树的前提下，能保证平衡的树。
AVL树特点 二叉搜索树的特点：对树上的任意节点，其左子树上的值都小于当前节点的值，其右子树上的值都大约当前节点的值 平衡：对树上的任意节点，其左子树高度与右子树高度相差不超过1.（高度差可为-1，0，1） AVL树的基本操作/功能 二叉搜索树的操作：插入/删除/搜索，可能还包括找上一个/下一个节点 维持树的平衡 维持树的平衡 平衡条件是什么？ 对树上的任意节点，其左子树高度与右子树高度相差不超过1.（高度差可为-1，0，1）
什么原因会失去平衡，哪些节点会失去平衡？ 假设当前的树已经平衡。当AVL树进行插入/删除操作时，可能造成某些节点左右子树高度的变动，破坏树的平衡。 具体的说，插入/删除位置的祖先节点可能会失去平衡。所以插入删除完成后，需要逆着查找路径，依次维护祖先节点的平衡性。
如何使失去平衡的某个节点恢复平衡？ 我们要做的操作是，调整该节点处的左右子树高度，使其重新平衡。形象的描述就是要进行旋转操作，使其重新平衡。
左旋操作、右旋操作示意图：
img 实际上，一次旋转操作并不能保证使失去平衡的树恢复平衡。
不平衡情况 前面说了插入/删除节点可能导致祖先节点失去平衡。以插入节点为例（删除类似），祖先节点具体会有4种不平衡情况：LL、RR、LR、RL。下面具体说明。
在左孩子的左子树插入节点导致不平衡LL 批注 2020-06-11 144254 这种情况只需在失去平衡的节点Y处，进行一次左旋操作即可。
在右孩子的右子树插入节点导致不平衡RR 批注 2020-06-11 144827 这种情况只需在失去平衡的节点X处，进行一次右旋操作即可。
在左孩子的右子树插入节点导致不平衡LR 批注 2020-06-11 145834 这种情况需在失去平衡的节点的左子节点X处，先进行一次左旋操作，再在当前节点Y进行一次右旋操作即可。
在右孩子的左子树插入节点导致不平衡RL 批注 2020-06-11 150123 这种情况需在失去平衡的节点的右子节点处，先进行一次右旋操作，再在当前节点进行一次左旋操作即可。
java实现：（插入/删除和中序遍历） packagecom.jingmin.datastructure; importjava.util.Scanner; importjava.util.Stack; /** * @author : wangjm * @date : 2020/6/11 16:38 * AVL树(插入/删除操作和中序遍历） * &amp;lt;p&amp;gt; * 参考（过程和逻辑）：https://zhuanlan.</description></item><item><title>树和二叉树</title><link>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Thu, 25 Jun 2020 05:24:48 +0800</pubDate><guid>https://ole12138.gitee.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>树和二叉树 树和森林 树的基本概念 树的定义 树是一种逻辑结构
image-20200410215743659 树是n（n≥0）个结点的有限集合，n=0时，称为空树。
而任意非空树应满足： 1）有且仅有一个特定的称为根的结点。 2）当n&amp;gt;1时，其余结点可分为m（m&amp;gt;0）个互不相交的有限集合，其中每一个集合本身又是一棵树，称为根结点的子树。
树的特点之一：n个结点的树中只有n-1条边
树基本术语 祖先节点和子孙节点
双亲节点和孩子节点
兄弟节点
节点的度：树中一个结点的子结点的个数
树的度：树中最大的节点度数称为树的度
分支结点：度大于0的结点（子节点个数大于0的节点）
叶子结点：度为0的结点
节点的层次：从根节点开始数，根为第一层（也有的教材中定为0层）
节点的高度：节点到叶子节点所有路径上包含节点个数的最大值。
节点的深度：从根节点到该节点唯一的路径上包含的节点个数，根节点深度为1
树的高度（深度）：树中结点的最大层数
有序树和无序树
路径：树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的。路径是有方向的，从上到下；不同兄弟树中节点不存在路径。
路径长度：路径上所经历边的个数。
森林：m（m≥0）棵互不相交的树的集合
树的性质 树中的结点数等于所有结点的度数加1 度为m的树中第层上至多有\(m^{i-1}\)个结点（i≥1） 高度为h的m叉树至多有\((m^h-1)/(m-1)\)个结点(由等比数列前n项和公式获得) 具有n个结点的m叉树的最小高度为\(\left\lceil\log _{\mathrm{m}}(\mathrm{n}(m-1)+1)\right\rceil\)，这是由上一条性质反推出来的 树的存储结构 树和森林的遍历 树和森林及二叉树的转换 树的应用——并查集 二叉树 二叉树的基本概念 定义及特点 二叉树的存储结构 二叉树的遍历 线索二叉树 二叉树的应用 二叉排序树 平衡二叉树 哈夫曼树及哈夫曼编码</description></item></channel></rss>