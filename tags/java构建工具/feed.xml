<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java构建工具 on Jingmin's blog</title><link>https://ole12138.github.io/tags/java%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link><description>Recent content in Java构建工具 on Jingmin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright (c) 2020, Jingmin; All rights reserved.</copyright><lastBuildDate>Fri, 22 Jan 2021 13:47:18 +0800</lastBuildDate><atom:link href="https://ole12138.github.io/tags/java%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/feed.xml" rel="self" type="application/rss+xml"/><item><title>Maven打包</title><link>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E6%89%93%E5%8C%85/</link><pubDate>Fri, 22 Jan 2021 13:47:18 +0800</pubDate><guid>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E6%89%93%E5%8C%85/</guid><description>Maven打jar包 实际开发的项目一般都要打成jar包或者war包。
如果是独立的java程序，打成jar包后，在安装了java运行时的环境中，命令行即可直接运行：
java -jar xxx.jar 如果是传统的java web项目，打成war包后，放入tomcat或其他java web容器中，即可直接运行。
如果使用springboot开发java web项目，由于springboot默认集成javaweb容器，也可以打成jar包，在命令行直接运行。
独立java程序打jar包 首先，项目的pom文件要添加一行，设置打包格式为jar格式：
&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 然后要在项目的pom.xml文件中添加maven-resources-plugin,用于将项目的配置文件复制到将要生成的jar包外，方便修改配置。（这里将项目的配置文件复制到了输出文件夹的/resources目录下）。
&amp;lt;!-- Maven插件的汇总介绍： https://maven.apache.org/plugins/index.html --&amp;gt; &amp;lt;!-- 资源/配置文件的复制插件 --&amp;gt; &amp;lt;!-- https://maven.apache.org/plugins/maven-resources-plugin/ --&amp;gt; &amp;lt;!-- 默认：src/main/resources下的资源和pom.xml下project.build.resources标签下的资源都会被自动复制到源码编译后的输出目录--&amp;gt; &amp;lt;!-- 默认：测试源码目录的资源会被自动输出到测试输出目录--&amp;gt; &amp;lt;!-- 如果想要把配置/资源输出到指定目录，需要作自定义配置--&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt; &amp;lt;!-- 自定义配置：该过程的作用是用于复制指定的资源文件到指定位置--&amp;gt; &amp;lt;!--可用于将配置文件放到jar包外面，方便修改 --&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-resources&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;*.properties&amp;lt;/include&amp;gt; &amp;lt;include&amp;gt;log4j2.xml&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}/resources/&amp;lt;/outputDirectory&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; 然后要在项目的pom.xml文件中添加maven-dependency-plugin,用于将项目的依赖复制到将要生成的jar包外。（这里将项目的依赖复制到了输出文件夹的/lib目录下）。
&amp;lt;!--依赖复制与分析插件--&amp;gt; &amp;lt;!--https://maven.apache.org/plugins/maven-dependency-plugin/--&amp;gt; &amp;lt;!-- 这里该插件的作用是用于复制依赖的jar包到指定的文件夹里 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.</description></item><item><title>Maven pom.xml中的元素modules、parent、properties以及import（转载）</title><link>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E4%BD%BF%E7%94%A8%E8%BD%AC%E8%BD%BD/</link><pubDate>Wed, 06 Jan 2021 10:00:39 +0800</pubDate><guid>https://ole12138.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/maven%E4%BD%BF%E7%94%A8%E8%BD%AC%E8%BD%BD/</guid><description>Maven pom.xml中的元素modules、parent、properties以及import 非原创，转载来源：https://www.cnblogs.com/youzhibing/p/5427130.html
另，Maven文档链接：https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
maven的核心是pom.xml。印象最深的就是如下四个元素：modules、parent、properties、import。
modules 从字面意思来说，module就是模块，而pom.xml中的modules也正是这个意思，用来管理同个项目中的各个模块；如果maven用的比较简单，或者说项目的模块在pom.xml没进行划分，那么此元素是用不到的；不过一般大一点的项目是要用到的。
需求场景 如果我们的项目分成了好几个模块，那么我们构建的时候是不是有几个模块就需要构建几次了（到每个模块的目录下执行mvn命令）？当然，你逐个构建没问题，但是非要这么麻烦的一个一个的构建吗，那么简单的做法就是使用聚合，一次构建全部模块。
具体实现 a.既然使用聚合，那么就需要一个聚合的载体，先创建一个普通的maven项目account-aggregator,如下图：
因为是个聚合体，仅仅负责聚合其他模块，那么就只需要上述目录，该删除的就删了；注意的是pom文件的书写：
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.youzhibing.account&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;account-aggregator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;Account Aggrregator&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;modules&amp;gt;　&amp;lt;!-- 模块都写在此处 --&amp;gt; &amp;lt;module&amp;gt;account-register&amp;lt;/module&amp;gt; &amp;lt;module&amp;gt;account-persist&amp;lt;/module&amp;gt; &amp;lt;/modules&amp;gt; &amp;lt;/project&amp;gt; b.创建子模account-register、account-persist:右击account-aggregator，new &amp;ndash;&amp;gt; other &amp;ndash;&amp;gt; Maven，选择Maven Module，创建maven模块。
c.创建完成后，项目结构如下，那么此时account-aggregator可以收缩起来了，我们操作具体子模块就好了。
d.注意点，当我们打开包结构的子模块的pom文件时，发现离预期的多了一些内容，我们坐下处理就好了
e.那么编码完了之后，我们只需要构建account-aggregator就好了，所有的子模块都会构建。
parent 继承，和java中的继承相当，作用就是复用
需求场景 若每个子模块都都用的了spring，那么我们是不是每个子模块都需要单独配置spring依赖了?,这么做是可以的，但是我们有更优的做法，那就是继承，用parent来实现。
具体实现 a.配置父pom.xml
我就用聚合pom来做父pom,配置子模块的公共依赖。
父(account-aggregator)pom.xml :
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.youzhibing.account&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;account-aggregator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;Account Aggrregator&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;modules&amp;gt; &amp;lt;!-- 模块都写在此处 --&amp;gt; &amp;lt;module&amp;gt;account-register&amp;lt;/module&amp;gt; &amp;lt;module&amp;gt;account-persist&amp;lt;/module&amp;gt; &amp;lt;/modules&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!</description></item></channel></rss>